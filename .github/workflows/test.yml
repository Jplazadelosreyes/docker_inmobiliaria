# .github/workflows/test.yml

name: Testear Aplicación Docker Compose

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Clonar el código del repositorio
        uses: actions/checkout@v4

      # --- NUEVO PASO: Instalar Docker Compose ---
      - name: Instalar Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
        # También podrías usar la acción oficial si prefieres:
        # - name: Setup Docker Buildx
        #   uses: docker/setup-buildx-action@v3
        # Esta acción a menudo instala Docker Compose v2 (docker compose)
        # que se usa como `docker compose` en lugar de `docker-compose`.
        # Si usas esta, tendrías que cambiar `docker-compose` por `docker compose` en los comandos siguientes.
        # Para este ejemplo, nos quedamos con `sudo apt-get install -y docker-compose` para mantener la compatibilidad con tus comandos actuales.
      # --- FIN DEL NUEVO PASO ---

      - name: Construir y levantar los servicios Docker Compose
        run: docker-compose up -d --build

      - name: Esperar a que PostgreSQL esté listo
        run: |
          echo "Esperando a que PostgreSQL acepte conexiones..."
          for i in $(seq 1 60); do
            docker exec docker_inmobiliaria-db-1 pg_isready -h localhost -p 5432 -U postgres -d docker_inmobiliaria && break
            echo "Todavía esperando por PostgreSQL... ($i/60)"
            sleep 1
          done
          docker exec docker_inmobiliaria-db-1 pg_isready -h localhost -p 5432 -U postgres -d docker_inmobiliaria || { echo "PostgreSQL no se inició a tiempo."; exit 1; }
          echo "PostgreSQL está listo."

      - name: Crear tabla e insertar datos de prueba en PostgreSQL
        run: |
          echo "Creando tabla 'propiedades' e insertando datos de prueba..."
          docker exec docker_inmobiliaria-db-1 psql -U postgres -d docker_inmobiliaria -c "
            CREATE TABLE IF NOT EXISTS propiedades (id SERIAL PRIMARY KEY, direccion TEXT NOT NULL);
            INSERT INTO propiedades (direccion) VALUES
            ('Calle 123, Bogotá'), ('Calle del Sol 5'), ('Avenida de la Luna 10'),
            ('Plaza Mayor 3'), ('Paseo del Río 22'), ('Callejón de la Flor 7'),
            ('Ronda de Noche 15'), ('Camino Viejo 1'), ('Calle Nueva 8'),
            ('Avenida del Mar 4'), ('Travesía del Parque 12'), ('nueva calle 1717')
            ON CONFLICT (id) DO NOTHING;
          "
          echo "Datos de prueba insertados."

      - name: Esperar a que el Backend (Node.js) esté listo
        run: |
          echo "Esperando a que el Backend responda..."
          for i in $(seq 1 60); do
            curl -s http://localhost:3000/ && break
            echo "Todavía esperando por el Backend... ($i/60)"
            sleep 1
          done
          curl -s http://localhost:3000/ || { echo "El Backend no se inició a tiempo."; exit 1; }
          echo "El Backend está listo."

      - name: Testear el Frontend (Nginx)
        run: |
          echo "Testeando accesibilidad de Nginx..."
          curl -f http://localhost:8080 || { echo "Nginx no es accesible."; exit 1; }
          echo "Frontend (Nginx) es accesible."

      - name: Testear la API del Backend (Obtener Propiedades)
        run: |
          echo "Testeando la API del Backend /api/propiedades..."
          response=$(curl -f http://localhost:3000/api/propiedades)
          echo "Respuesta de la API del Backend: $response"
          echo "$response" | jq -e '.[11] | has("id", "direccion")' || { echo "La respuesta de la API del Backend no es un array válido de propiedades o no contiene 12 elementos."; exit 1; }
          echo "La API del Backend es accesible y devuelve datos válidos."

      - name: Detener servicios Docker Compose
        if: always()
        run: docker-compose down
