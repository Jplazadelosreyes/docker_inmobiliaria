# .github/workflows/test.yml

name: Testear Conexión API Backend

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest # Elige un runner de Ubuntu

    steps:
      - name: Clonar el código del repositorio
        uses: actions/checkout@v4 # Acción para clonar el repositorio

      - name: Instalar Docker Compose
        # Instala docker-compose. 'jq' ya no es estrictamente necesario si no se parsean JSON complejos.
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose curl # 'curl' ya está disponible, pero lo incluimos por claridad

      - name: Construir y levantar los servicios Docker Compose
        # --build para asegurar que las imágenes se reconstruyan con los últimos cambios.
        # -d para ejecutar los contenedores en segundo plano.
        run: docker-compose up -d --build

      - name: Esperar a que el Backend (Node.js) esté listo y responda
        # Usa curl para verificar que el endpoint raíz del backend responde.
        # Bucle con reintentos para dar tiempo a que el backend arranque.
        run: |
          echo "Esperando a que el Backend responda en el endpoint raíz /..."
          for i in $(seq 1 60); do # Reintentar hasta 60 veces (60 segundos)
            curl -s http://localhost:3000/ && break
            echo "Todavía esperando por el Backend... ($i/60)"
            sleep 1
          done
          # Si después de los reintentos no está listo, falla el paso.
          curl -s http://localhost:3000/ || { echo "El Backend no se inició a tiempo o no responde en el endpoint /."; exit 1; }
          echo "El Backend está listo y responde en el endpoint /."

      - name: Detener servicios Docker Compose
        # Este paso se ejecuta siempre (incluso si los pasos anteriores fallan)
        # para asegurar que los recursos se liberen.
        if: always()
        run: docker-compose down
