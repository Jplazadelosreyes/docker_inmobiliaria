# .github/workflows/test.yml

name: Testear Aplicación Docker Compose (Simple)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest # Elige un runner de Ubuntu

    steps:
      - name: Clonar el código del repositorio
        uses: actions/checkout@v4 # Acción para clonar el repositorio

      - name: Instalar Docker Compose y jq
        # Instala docker-compose y jq (para parsear JSON en los tests)
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose jq

      - name: Construir y levantar los servicios Docker Compose
        # --build para asegurar que las imágenes se reconstruyan con los últimos cambios.
        # -d para ejecutar los contenedores en segundo plano.
        run: docker-compose up -d --build

      - name: Esperar un poco a que los servicios arranquen
        # Una pausa simple para dar tiempo a que la DB y el Backend inicien completamente.
        # Puedes ajustar este tiempo si es necesario (ej. 15-30 segundos).
        run: sleep 20

      - name: Crear la base de datos 'docker_inmobiliaria' si no existe
        # Conectamos a la base de datos por defecto 'postgres' para crear nuestra base de datos.
        # El '|| true' evita que el paso falle si la base de datos ya existe.
        run: |
          echo "Creando la base de datos 'docker_inmobiliaria' si no existe..."
          PGPASSWORD=postgres docker exec docker_inmobiliaria-db-1 psql -U postgres -d postgres -c "CREATE DATABASE docker_inmobiliaria;" || true
          echo "Base de datos verificada/creada."
        env:
          # Pasa la contraseña de PostgreSQL como una variable de entorno segura.
          # Necesitarás configurar este secreto en tu repositorio de GitHub.
          PGPASSWORD: ${{ secrets.POSTGRES_PASSWORD_TEST }}

      - name: Crear tabla e insertar datos de prueba en PostgreSQL
        # Conecta a la base de datos 'docker_inmobiliaria' y crea la tabla 'propiedades'
        # e inserta los 12 datos de prueba.
        run: |
          echo "Creando tabla 'propiedades' e insertando datos de prueba..."
          PGPASSWORD=postgres docker exec docker_inmobiliaria-db-1 psql -U postgres -d docker_inmobiliaria -c "
            CREATE TABLE IF NOT EXISTS propiedades (id SERIAL PRIMARY KEY, direccion TEXT NOT NULL);
            INSERT INTO propiedades (direccion) VALUES
            ('Calle 123, Bogotá'), ('Calle del Sol 5'), ('Avenida de la Luna 10'),
            ('Plaza Mayor 3'), ('Paseo del Río 22'), ('Callejón de la Flor 7'),
            ('Ronda de Noche 15'), ('Camino Viejo 1'), ('Calle Nueva 8'),
            ('Avenida del Mar 4'), ('Travesía del Parque 12'), ('nueva calle 1717');
          "
          echo "Datos de prueba insertados."
        env:
          PGPASSWORD: ${{ secrets.POSTGRES_PASSWORD_TEST }}

      - name: Testear el Backend API
        # Verifica que el endpoint /api/propiedades responde con un JSON válido
        # y que contiene exactamente 12 elementos.
        run: |
          echo "Testeando el endpoint /api/propiedades..."
          response=$(curl -s http://localhost:3000/api/propiedades)
          echo "Respuesta del Backend: $response"
          # Valida que la respuesta es un array JSON y tiene 12 elementos.
          echo "$response" | jq -e '. | length == 12' || { echo "La API no devolvió 12 propiedades o el JSON es inválido."; exit 1; }
          echo "Backend API funcionando correctamente."

      - name: Testear el Frontend (Nginx)
        # Verifica que la página principal es accesible y contiene un texto específico
        # de tu index.html actualizado, lo que implica que el HTML con JS se está sirviendo.
        run: |
          echo "Testeando el Frontend Nginx..."
          curl -s http://localhost:8080 | grep "Explora nuestro listado de propiedades disponibles" || { echo "El Frontend no es accesible o no contiene el texto esperado."; exit 1; }
          echo "Frontend Nginx funcionando correctamente."

      - name: Detener servicios Docker Compose
        # Este paso se ejecuta siempre (incluso si los pasos anteriores fallan)
        # para asegurar que los recursos se liberen.
        if: always()
        run: docker-compose down
